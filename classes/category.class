<?php
    class Category{
        private $conn;

        public function __construct($db) {
            $this->conn = $db;
        }
        public function index($page, $recordsPerPage) {
            // Calculate the offset for the query
            $offset = ($page - 1) * $recordsPerPage;
            $sqlCount = "SELECT COUNT(*) as total FROM category";
            $stmtCount = $this->conn->prepare($sqlCount);
            try {
                $stmtCount->execute();
                $totalRecords = $stmtCount->fetch(PDO::FETCH_ASSOC)['total'];
            } catch (PDOException $e) {
                return ['status' => 'error', 'message' => 'Database error: ' . $e->getMessage()];
            }
    
            // Calculate total pages
            $totalPages = ceil($totalRecords / $recordsPerPage);
    
            // Query to get the records for the current page
            $sql = "SELECT * FROM category LIMIT :limit OFFSET :offset";
            $stmt = $this->conn->prepare($sql);
            $stmt->bindParam(':limit', $recordsPerPage, PDO::PARAM_INT);
            $stmt->bindParam(':offset', $offset, PDO::PARAM_INT);
    
            try {
                $stmt->execute();
                $categories = $stmt->fetchAll(PDO::FETCH_ASSOC);
                return [
                    'status' => 'success',
                    'data' => $categories,
                    'currentPage' => $page,
                    'totalPages' => $totalPages,
                    'recordsPerPage' => $recordsPerPage,
                    'totalRecords' => $totalRecords
                ];
            } catch (PDOException $e) {
                return ['status' => 'error', 'message' => 'Database error: ' . $e->getMessage()];
            }
        }
        public function getAllcategory(){
            $sql = "SELECT * FROM category";
            $stmt = $this->conn->prepare($sql);
            $stmt->execute();
            $categories = $stmt->fetchAll(PDO::FETCH_ASSOC);
            return ['status'=>'success', 'data'=>$categories];
        }

        public function create($request){
            $name = $request['categoryname'];
            $image = $request['image'];
            $amount = $request['amount'];
            $sql = "INSERT INTO category(name, image, amount) VALUES (:name, :image, :amount)";
            try {
                $stmt = $this->conn->prepare($sql);
                $result = $stmt->execute(['name' => $name, 'image' => $image, 'amount' => $amount]);
                if ($result) {
                    return ['status'=>'success'];
                } else {
                    return ['status'=>'failed'];
                }
            } catch (PDOException $e) {
                error_log('Database error: ' . $e->getMessage());
                return ['status'=>'failed'];
            }
        }
        public function checkCategory($request) {
            $categoryname = trim($request['categoryname']);
            $sql = "SELECT * FROM category WHERE name = :categoryname";
            
            try {
                $stmt = $this->conn->prepare($sql);
                $stmt->bindParam(':categoryname', $categoryname, PDO::PARAM_STR);
                $stmt->execute();
                $result = $stmt->fetch(PDO::FETCH_ASSOC);

                return $result;
            } catch (PDOException $e) {
                error_log('Database error: ' . $e->getMessage());
                return 'error';
            }
        }
        public function updateCategory($request) {
            $sql = 'UPDATE category SET name = :categoryname, image = :image, amount = :amount WHERE id = :categoryid';
        
            // Prepare the statement
            $stmt = $this->conn->prepare($sql);
        
            // Bind parameters to prevent SQL injection
            $stmt->bindParam(':categoryname', $request['categoryname'], PDO::PARAM_STR);
            $stmt->bindParam(':image', $request['image'], PDO::PARAM_STR);
            $stmt->bindParam(':amount', $request['amount'], PDO::PARAM_INT);
            $stmt->bindParam(':categoryid', $request['categoryid'], PDO::PARAM_INT);
        
            // Execute the statement
            $stmt->execute();
            if($stmt->rowCount() > 0){
                return ['status'=>'success'];
            }else{
                return ['status'=>'failed'];
            }
        }
        public function deleteCategory($request) {
            $sql = 'DELETE FROM category WHERE id = :categoryid';
            $stmt = $this->conn->prepare($sql);
            $stmt->bindParam(':categoryid', $request['categoryid'], PDO::PARAM_INT);
            $stmt->execute();
            return $stmt->rowCount();
        }

    }
?>